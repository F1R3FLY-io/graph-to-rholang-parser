/* automatically generated by rust-bindgen 0.72.0 */

pub const _POSIX_C_SOURCE: u32 = 200809;
pub const _STRING_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 0;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __TIMESIZE: u32 = 64;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_60559_BFP__: u32 = 201404;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_IEC_60559_COMPLEX__: u32 = 201404;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 36;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_TYPES_LOCALE_T_H: u32 = 1;
pub const _BITS_TYPES___LOCALE_T_H: u32 = 1;
pub const _STDIO_H: u32 = 1;
pub const __GNUC_VA_LIST: u32 = 1;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const _____fpos_t_defined: u32 = 1;
pub const ____mbstate_t_defined: u32 = 1;
pub const _____fpos64_t_defined: u32 = 1;
pub const ____FILE_defined: u32 = 1;
pub const __FILE_defined: u32 = 1;
pub const __struct_FILE_defined: u32 = 1;
pub const _IO_EOF_SEEN: u32 = 16;
pub const _IO_ERR_SEEN: u32 = 32;
pub const _IO_USER_LOCK: u32 = 32768;
pub const _IOFBF: u32 = 0;
pub const _IOLBF: u32 = 1;
pub const _IONBF: u32 = 2;
pub const BUFSIZ: u32 = 8192;
pub const EOF: i32 = -1;
pub const SEEK_SET: u32 = 0;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const _BITS_STDIO_LIM_H: u32 = 1;
pub const L_tmpnam: u32 = 20;
pub const TMP_MAX: u32 = 238328;
pub const FILENAME_MAX: u32 = 4096;
pub const L_ctermid: u32 = 9;
pub const FOPEN_MAX: u32 = 16;
pub const __HAVE_FLOAT128: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128: u32 = 0;
pub const __HAVE_FLOAT64X: u32 = 1;
pub const __HAVE_FLOAT64X_LONG_DOUBLE: u32 = 1;
pub const __HAVE_FLOAT16: u32 = 0;
pub const __HAVE_FLOAT32: u32 = 1;
pub const __HAVE_FLOAT64: u32 = 1;
pub const __HAVE_FLOAT32X: u32 = 1;
pub const __HAVE_FLOAT128X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT16: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128X: u32 = 0;
pub const __HAVE_FLOATN_NOT_TYPEDEF: u32 = 0;
pub const BUFFER_INITIAL: u32 = 2048;
pub const _L_PAREN: u8 = 40u8;
pub const _R_PAREN: u8 = 41u8;
pub type wchar_t = ::std::os::raw::c_int;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Default, Copy, Clone)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: ::std::os::raw::c_longlong,
    pub __bindgen_padding_0: u64,
    pub __clang_max_align_nonce2: u128,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of max_align_t"][::std::mem::size_of::<max_align_t>() - 32usize];
    ["Alignment of max_align_t"][::std::mem::align_of::<max_align_t>() - 16usize];
    ["Offset of field: max_align_t::__clang_max_align_nonce1"]
        [::std::mem::offset_of!(max_align_t, __clang_max_align_nonce1) - 0usize];
    ["Offset of field: max_align_t::__clang_max_align_nonce2"]
        [::std::mem::offset_of!(max_align_t, __clang_max_align_nonce2) - 16usize];
};
unsafe extern "C" {
    pub fn memcpy(
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn memmove(
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn memset(
        __s: *mut ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn memcmp(
        __s1: *const ::std::os::raw::c_void,
        __s2: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __memcmpeq(
        __s1: *const ::std::os::raw::c_void,
        __s2: *const ::std::os::raw::c_void,
        __n: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn memchr(
        __s: *const ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn strcpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn strncpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn strcat(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn strncat(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn strcmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn strncmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn strcoll(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn strxfrm(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_struct {
    pub __locales: [*mut __locale_data; 13usize],
    pub __ctype_b: *const ::std::os::raw::c_ushort,
    pub __ctype_tolower: *const ::std::os::raw::c_int,
    pub __ctype_toupper: *const ::std::os::raw::c_int,
    pub __names: [*const ::std::os::raw::c_char; 13usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __locale_struct"][::std::mem::size_of::<__locale_struct>() - 232usize];
    ["Alignment of __locale_struct"][::std::mem::align_of::<__locale_struct>() - 8usize];
    ["Offset of field: __locale_struct::__locales"]
        [::std::mem::offset_of!(__locale_struct, __locales) - 0usize];
    ["Offset of field: __locale_struct::__ctype_b"]
        [::std::mem::offset_of!(__locale_struct, __ctype_b) - 104usize];
    ["Offset of field: __locale_struct::__ctype_tolower"]
        [::std::mem::offset_of!(__locale_struct, __ctype_tolower) - 112usize];
    ["Offset of field: __locale_struct::__ctype_toupper"]
        [::std::mem::offset_of!(__locale_struct, __ctype_toupper) - 120usize];
    ["Offset of field: __locale_struct::__names"]
        [::std::mem::offset_of!(__locale_struct, __names) - 128usize];
};
impl Default for __locale_struct {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type __locale_t = *mut __locale_struct;
pub type locale_t = __locale_t;
unsafe extern "C" {
    pub fn strcoll_l(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __l: locale_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn strxfrm_l(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: usize,
        __l: locale_t,
    ) -> usize;
}
unsafe extern "C" {
    pub fn strdup(__s: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn strndup(
        __string: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn strchr(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn strrchr(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn strcspn(
        __s: *const ::std::os::raw::c_char,
        __reject: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    pub fn strspn(
        __s: *const ::std::os::raw::c_char,
        __accept: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    pub fn strpbrk(
        __s: *const ::std::os::raw::c_char,
        __accept: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn strstr(
        __haystack: *const ::std::os::raw::c_char,
        __needle: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn strtok(
        __s: *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn __strtok_r(
        __s: *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
        __save_ptr: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn strtok_r(
        __s: *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
        __save_ptr: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn strlen(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    pub fn strnlen(__string: *const ::std::os::raw::c_char, __maxlen: usize) -> usize;
}
unsafe extern "C" {
    pub fn strerror(__errnum: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    #[link_name = "\u{1}__xpg_strerror_r"]
    pub fn strerror_r(
        __errnum: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn strerror_l(
        __errnum: ::std::os::raw::c_int,
        __l: locale_t,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn strsignal(__sig: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn __stpcpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn stpcpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn __stpncpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn stpncpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
#[doc = "   TypeDef Section"]
pub type Integer = ::std::os::raw::c_int;
pub type Char = ::std::os::raw::c_char;
pub type Double = f64;
pub type String = *mut ::std::os::raw::c_char;
pub type Ident = *mut ::std::os::raw::c_char;
pub type UVar = *mut ::std::os::raw::c_char;
pub type LVar = *mut ::std::os::raw::c_char;
pub type Graph = *mut Graph_;
pub type Binding = *mut Binding_;
pub type GraphBinding = *mut GraphBinding_;
pub type Vertex = *mut Vertex_;
pub type Name = *mut Name_;
pub type ListName = *mut ListName_;
#[doc = "   Forward Declarations"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Graph_ {
    pub kind: Graph___bindgen_ty_1,
    pub u: Graph___bindgen_ty_2,
}
pub const Graph__is_GNil: Graph___bindgen_ty_1 = 0;
pub const Graph__is_GVertex: Graph___bindgen_ty_1 = 1;
pub const Graph__is_GVar: Graph___bindgen_ty_1 = 2;
pub const Graph__is_GNominate: Graph___bindgen_ty_1 = 3;
pub const Graph__is_GEdgeAnon: Graph___bindgen_ty_1 = 4;
pub const Graph__is_GEdgeNamed: Graph___bindgen_ty_1 = 5;
pub const Graph__is_GRuleAnon: Graph___bindgen_ty_1 = 6;
pub const Graph__is_GRuleNamed: Graph___bindgen_ty_1 = 7;
pub const Graph__is_GSubgraph: Graph___bindgen_ty_1 = 8;
pub const Graph__is_GTensor: Graph___bindgen_ty_1 = 9;
pub type Graph___bindgen_ty_1 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub union Graph___bindgen_ty_2 {
    pub gVertex_: Graph___bindgen_ty_2__bindgen_ty_1,
    pub gVar_: Graph___bindgen_ty_2__bindgen_ty_2,
    pub gNominate_: Graph___bindgen_ty_2__bindgen_ty_3,
    pub gEdgeAnon_: Graph___bindgen_ty_2__bindgen_ty_4,
    pub gEdgeNamed_: Graph___bindgen_ty_2__bindgen_ty_5,
    pub gRuleAnon_: Graph___bindgen_ty_2__bindgen_ty_6,
    pub gRuleNamed_: Graph___bindgen_ty_2__bindgen_ty_7,
    pub gSubgraph_: Graph___bindgen_ty_2__bindgen_ty_8,
    pub gTensor_: Graph___bindgen_ty_2__bindgen_ty_9,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Graph___bindgen_ty_2__bindgen_ty_1 {
    pub graph_: Graph,
    pub vertex_: Vertex,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Graph___bindgen_ty_2__bindgen_ty_1"]
        [::std::mem::size_of::<Graph___bindgen_ty_2__bindgen_ty_1>() - 16usize];
    ["Alignment of Graph___bindgen_ty_2__bindgen_ty_1"]
        [::std::mem::align_of::<Graph___bindgen_ty_2__bindgen_ty_1>() - 8usize];
    ["Offset of field: Graph___bindgen_ty_2__bindgen_ty_1::graph_"]
        [::std::mem::offset_of!(Graph___bindgen_ty_2__bindgen_ty_1, graph_) - 0usize];
    ["Offset of field: Graph___bindgen_ty_2__bindgen_ty_1::vertex_"]
        [::std::mem::offset_of!(Graph___bindgen_ty_2__bindgen_ty_1, vertex_) - 8usize];
};
impl Default for Graph___bindgen_ty_2__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Graph___bindgen_ty_2__bindgen_ty_2 {
    pub graph_: Graph,
    pub lvar_: LVar,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Graph___bindgen_ty_2__bindgen_ty_2"]
        [::std::mem::size_of::<Graph___bindgen_ty_2__bindgen_ty_2>() - 16usize];
    ["Alignment of Graph___bindgen_ty_2__bindgen_ty_2"]
        [::std::mem::align_of::<Graph___bindgen_ty_2__bindgen_ty_2>() - 8usize];
    ["Offset of field: Graph___bindgen_ty_2__bindgen_ty_2::graph_"]
        [::std::mem::offset_of!(Graph___bindgen_ty_2__bindgen_ty_2, graph_) - 0usize];
    ["Offset of field: Graph___bindgen_ty_2__bindgen_ty_2::lvar_"]
        [::std::mem::offset_of!(Graph___bindgen_ty_2__bindgen_ty_2, lvar_) - 8usize];
};
impl Default for Graph___bindgen_ty_2__bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Graph___bindgen_ty_2__bindgen_ty_3 {
    pub binding_: Binding,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Graph___bindgen_ty_2__bindgen_ty_3"]
        [::std::mem::size_of::<Graph___bindgen_ty_2__bindgen_ty_3>() - 8usize];
    ["Alignment of Graph___bindgen_ty_2__bindgen_ty_3"]
        [::std::mem::align_of::<Graph___bindgen_ty_2__bindgen_ty_3>() - 8usize];
    ["Offset of field: Graph___bindgen_ty_2__bindgen_ty_3::binding_"]
        [::std::mem::offset_of!(Graph___bindgen_ty_2__bindgen_ty_3, binding_) - 0usize];
};
impl Default for Graph___bindgen_ty_2__bindgen_ty_3 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Graph___bindgen_ty_2__bindgen_ty_4 {
    pub binding_1: Binding,
    pub binding_2: Binding,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Graph___bindgen_ty_2__bindgen_ty_4"]
        [::std::mem::size_of::<Graph___bindgen_ty_2__bindgen_ty_4>() - 16usize];
    ["Alignment of Graph___bindgen_ty_2__bindgen_ty_4"]
        [::std::mem::align_of::<Graph___bindgen_ty_2__bindgen_ty_4>() - 8usize];
    ["Offset of field: Graph___bindgen_ty_2__bindgen_ty_4::binding_1"]
        [::std::mem::offset_of!(Graph___bindgen_ty_2__bindgen_ty_4, binding_1) - 0usize];
    ["Offset of field: Graph___bindgen_ty_2__bindgen_ty_4::binding_2"]
        [::std::mem::offset_of!(Graph___bindgen_ty_2__bindgen_ty_4, binding_2) - 8usize];
};
impl Default for Graph___bindgen_ty_2__bindgen_ty_4 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Graph___bindgen_ty_2__bindgen_ty_5 {
    pub binding_1: Binding,
    pub binding_2: Binding,
    pub name_: Name,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Graph___bindgen_ty_2__bindgen_ty_5"]
        [::std::mem::size_of::<Graph___bindgen_ty_2__bindgen_ty_5>() - 24usize];
    ["Alignment of Graph___bindgen_ty_2__bindgen_ty_5"]
        [::std::mem::align_of::<Graph___bindgen_ty_2__bindgen_ty_5>() - 8usize];
    ["Offset of field: Graph___bindgen_ty_2__bindgen_ty_5::binding_1"]
        [::std::mem::offset_of!(Graph___bindgen_ty_2__bindgen_ty_5, binding_1) - 0usize];
    ["Offset of field: Graph___bindgen_ty_2__bindgen_ty_5::binding_2"]
        [::std::mem::offset_of!(Graph___bindgen_ty_2__bindgen_ty_5, binding_2) - 8usize];
    ["Offset of field: Graph___bindgen_ty_2__bindgen_ty_5::name_"]
        [::std::mem::offset_of!(Graph___bindgen_ty_2__bindgen_ty_5, name_) - 16usize];
};
impl Default for Graph___bindgen_ty_2__bindgen_ty_5 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Graph___bindgen_ty_2__bindgen_ty_6 {
    pub graph_1: Graph,
    pub graph_2: Graph,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Graph___bindgen_ty_2__bindgen_ty_6"]
        [::std::mem::size_of::<Graph___bindgen_ty_2__bindgen_ty_6>() - 16usize];
    ["Alignment of Graph___bindgen_ty_2__bindgen_ty_6"]
        [::std::mem::align_of::<Graph___bindgen_ty_2__bindgen_ty_6>() - 8usize];
    ["Offset of field: Graph___bindgen_ty_2__bindgen_ty_6::graph_1"]
        [::std::mem::offset_of!(Graph___bindgen_ty_2__bindgen_ty_6, graph_1) - 0usize];
    ["Offset of field: Graph___bindgen_ty_2__bindgen_ty_6::graph_2"]
        [::std::mem::offset_of!(Graph___bindgen_ty_2__bindgen_ty_6, graph_2) - 8usize];
};
impl Default for Graph___bindgen_ty_2__bindgen_ty_6 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Graph___bindgen_ty_2__bindgen_ty_7 {
    pub graph_1: Graph,
    pub graph_2: Graph,
    pub name_: Name,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Graph___bindgen_ty_2__bindgen_ty_7"]
        [::std::mem::size_of::<Graph___bindgen_ty_2__bindgen_ty_7>() - 24usize];
    ["Alignment of Graph___bindgen_ty_2__bindgen_ty_7"]
        [::std::mem::align_of::<Graph___bindgen_ty_2__bindgen_ty_7>() - 8usize];
    ["Offset of field: Graph___bindgen_ty_2__bindgen_ty_7::graph_1"]
        [::std::mem::offset_of!(Graph___bindgen_ty_2__bindgen_ty_7, graph_1) - 0usize];
    ["Offset of field: Graph___bindgen_ty_2__bindgen_ty_7::graph_2"]
        [::std::mem::offset_of!(Graph___bindgen_ty_2__bindgen_ty_7, graph_2) - 8usize];
    ["Offset of field: Graph___bindgen_ty_2__bindgen_ty_7::name_"]
        [::std::mem::offset_of!(Graph___bindgen_ty_2__bindgen_ty_7, name_) - 16usize];
};
impl Default for Graph___bindgen_ty_2__bindgen_ty_7 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Graph___bindgen_ty_2__bindgen_ty_8 {
    pub graphbinding_: GraphBinding,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Graph___bindgen_ty_2__bindgen_ty_8"]
        [::std::mem::size_of::<Graph___bindgen_ty_2__bindgen_ty_8>() - 8usize];
    ["Alignment of Graph___bindgen_ty_2__bindgen_ty_8"]
        [::std::mem::align_of::<Graph___bindgen_ty_2__bindgen_ty_8>() - 8usize];
    ["Offset of field: Graph___bindgen_ty_2__bindgen_ty_8::graphbinding_"]
        [::std::mem::offset_of!(Graph___bindgen_ty_2__bindgen_ty_8, graphbinding_) - 0usize];
};
impl Default for Graph___bindgen_ty_2__bindgen_ty_8 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Graph___bindgen_ty_2__bindgen_ty_9 {
    pub graph_1: Graph,
    pub graph_2: Graph,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Graph___bindgen_ty_2__bindgen_ty_9"]
        [::std::mem::size_of::<Graph___bindgen_ty_2__bindgen_ty_9>() - 16usize];
    ["Alignment of Graph___bindgen_ty_2__bindgen_ty_9"]
        [::std::mem::align_of::<Graph___bindgen_ty_2__bindgen_ty_9>() - 8usize];
    ["Offset of field: Graph___bindgen_ty_2__bindgen_ty_9::graph_1"]
        [::std::mem::offset_of!(Graph___bindgen_ty_2__bindgen_ty_9, graph_1) - 0usize];
    ["Offset of field: Graph___bindgen_ty_2__bindgen_ty_9::graph_2"]
        [::std::mem::offset_of!(Graph___bindgen_ty_2__bindgen_ty_9, graph_2) - 8usize];
};
impl Default for Graph___bindgen_ty_2__bindgen_ty_9 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Graph___bindgen_ty_2"][::std::mem::size_of::<Graph___bindgen_ty_2>() - 24usize];
    ["Alignment of Graph___bindgen_ty_2"][::std::mem::align_of::<Graph___bindgen_ty_2>() - 8usize];
    ["Offset of field: Graph___bindgen_ty_2::gVertex_"]
        [::std::mem::offset_of!(Graph___bindgen_ty_2, gVertex_) - 0usize];
    ["Offset of field: Graph___bindgen_ty_2::gVar_"]
        [::std::mem::offset_of!(Graph___bindgen_ty_2, gVar_) - 0usize];
    ["Offset of field: Graph___bindgen_ty_2::gNominate_"]
        [::std::mem::offset_of!(Graph___bindgen_ty_2, gNominate_) - 0usize];
    ["Offset of field: Graph___bindgen_ty_2::gEdgeAnon_"]
        [::std::mem::offset_of!(Graph___bindgen_ty_2, gEdgeAnon_) - 0usize];
    ["Offset of field: Graph___bindgen_ty_2::gEdgeNamed_"]
        [::std::mem::offset_of!(Graph___bindgen_ty_2, gEdgeNamed_) - 0usize];
    ["Offset of field: Graph___bindgen_ty_2::gRuleAnon_"]
        [::std::mem::offset_of!(Graph___bindgen_ty_2, gRuleAnon_) - 0usize];
    ["Offset of field: Graph___bindgen_ty_2::gRuleNamed_"]
        [::std::mem::offset_of!(Graph___bindgen_ty_2, gRuleNamed_) - 0usize];
    ["Offset of field: Graph___bindgen_ty_2::gSubgraph_"]
        [::std::mem::offset_of!(Graph___bindgen_ty_2, gSubgraph_) - 0usize];
    ["Offset of field: Graph___bindgen_ty_2::gTensor_"]
        [::std::mem::offset_of!(Graph___bindgen_ty_2, gTensor_) - 0usize];
};
impl Default for Graph___bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Graph_"][::std::mem::size_of::<Graph_>() - 32usize];
    ["Alignment of Graph_"][::std::mem::align_of::<Graph_>() - 8usize];
    ["Offset of field: Graph_::kind"][::std::mem::offset_of!(Graph_, kind) - 0usize];
    ["Offset of field: Graph_::u"][::std::mem::offset_of!(Graph_, u) - 8usize];
};
impl Default for Graph_ {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
unsafe extern "C" {
    pub fn make_GNil() -> Graph;
}
unsafe extern "C" {
    pub fn make_GVertex(p0: Vertex, p1: Graph) -> Graph;
}
unsafe extern "C" {
    pub fn make_GVar(p0: LVar, p1: Graph) -> Graph;
}
unsafe extern "C" {
    pub fn make_GNominate(p0: Binding) -> Graph;
}
unsafe extern "C" {
    pub fn make_GEdgeAnon(p0: Binding, p1: Binding) -> Graph;
}
unsafe extern "C" {
    pub fn make_GEdgeNamed(p0: Name, p1: Binding, p2: Binding) -> Graph;
}
unsafe extern "C" {
    pub fn make_GRuleAnon(p0: Graph, p1: Graph) -> Graph;
}
unsafe extern "C" {
    pub fn make_GRuleNamed(p0: Name, p1: Graph, p2: Graph) -> Graph;
}
unsafe extern "C" {
    pub fn make_GSubgraph(p0: GraphBinding) -> Graph;
}
unsafe extern "C" {
    pub fn make_GTensor(p0: Graph, p1: Graph) -> Graph;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Binding_ {
    pub kind: Binding___bindgen_ty_1,
    pub u: Binding___bindgen_ty_2,
}
pub const Binding__is_VBind: Binding___bindgen_ty_1 = 0;
pub type Binding___bindgen_ty_1 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub union Binding___bindgen_ty_2 {
    pub vBind_: Binding___bindgen_ty_2__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Binding___bindgen_ty_2__bindgen_ty_1 {
    pub graph_: Graph,
    pub lvar_: LVar,
    pub vertex_: Vertex,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Binding___bindgen_ty_2__bindgen_ty_1"]
        [::std::mem::size_of::<Binding___bindgen_ty_2__bindgen_ty_1>() - 24usize];
    ["Alignment of Binding___bindgen_ty_2__bindgen_ty_1"]
        [::std::mem::align_of::<Binding___bindgen_ty_2__bindgen_ty_1>() - 8usize];
    ["Offset of field: Binding___bindgen_ty_2__bindgen_ty_1::graph_"]
        [::std::mem::offset_of!(Binding___bindgen_ty_2__bindgen_ty_1, graph_) - 0usize];
    ["Offset of field: Binding___bindgen_ty_2__bindgen_ty_1::lvar_"]
        [::std::mem::offset_of!(Binding___bindgen_ty_2__bindgen_ty_1, lvar_) - 8usize];
    ["Offset of field: Binding___bindgen_ty_2__bindgen_ty_1::vertex_"]
        [::std::mem::offset_of!(Binding___bindgen_ty_2__bindgen_ty_1, vertex_) - 16usize];
};
impl Default for Binding___bindgen_ty_2__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Binding___bindgen_ty_2"][::std::mem::size_of::<Binding___bindgen_ty_2>() - 24usize];
    ["Alignment of Binding___bindgen_ty_2"]
        [::std::mem::align_of::<Binding___bindgen_ty_2>() - 8usize];
    ["Offset of field: Binding___bindgen_ty_2::vBind_"]
        [::std::mem::offset_of!(Binding___bindgen_ty_2, vBind_) - 0usize];
};
impl Default for Binding___bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Binding_"][::std::mem::size_of::<Binding_>() - 32usize];
    ["Alignment of Binding_"][::std::mem::align_of::<Binding_>() - 8usize];
    ["Offset of field: Binding_::kind"][::std::mem::offset_of!(Binding_, kind) - 0usize];
    ["Offset of field: Binding_::u"][::std::mem::offset_of!(Binding_, u) - 8usize];
};
impl Default for Binding_ {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
unsafe extern "C" {
    pub fn make_VBind(p0: LVar, p1: Vertex, p2: Graph) -> Binding;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct GraphBinding_ {
    pub kind: GraphBinding___bindgen_ty_1,
    pub u: GraphBinding___bindgen_ty_2,
}
pub const GraphBinding__is_GBind: GraphBinding___bindgen_ty_1 = 0;
pub type GraphBinding___bindgen_ty_1 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub union GraphBinding___bindgen_ty_2 {
    pub gBind_: GraphBinding___bindgen_ty_2__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GraphBinding___bindgen_ty_2__bindgen_ty_1 {
    pub graph_1: Graph,
    pub graph_2: Graph,
    pub uvar_: UVar,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of GraphBinding___bindgen_ty_2__bindgen_ty_1"]
        [::std::mem::size_of::<GraphBinding___bindgen_ty_2__bindgen_ty_1>() - 24usize];
    ["Alignment of GraphBinding___bindgen_ty_2__bindgen_ty_1"]
        [::std::mem::align_of::<GraphBinding___bindgen_ty_2__bindgen_ty_1>() - 8usize];
    ["Offset of field: GraphBinding___bindgen_ty_2__bindgen_ty_1::graph_1"]
        [::std::mem::offset_of!(GraphBinding___bindgen_ty_2__bindgen_ty_1, graph_1) - 0usize];
    ["Offset of field: GraphBinding___bindgen_ty_2__bindgen_ty_1::graph_2"]
        [::std::mem::offset_of!(GraphBinding___bindgen_ty_2__bindgen_ty_1, graph_2) - 8usize];
    ["Offset of field: GraphBinding___bindgen_ty_2__bindgen_ty_1::uvar_"]
        [::std::mem::offset_of!(GraphBinding___bindgen_ty_2__bindgen_ty_1, uvar_) - 16usize];
};
impl Default for GraphBinding___bindgen_ty_2__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of GraphBinding___bindgen_ty_2"]
        [::std::mem::size_of::<GraphBinding___bindgen_ty_2>() - 24usize];
    ["Alignment of GraphBinding___bindgen_ty_2"]
        [::std::mem::align_of::<GraphBinding___bindgen_ty_2>() - 8usize];
    ["Offset of field: GraphBinding___bindgen_ty_2::gBind_"]
        [::std::mem::offset_of!(GraphBinding___bindgen_ty_2, gBind_) - 0usize];
};
impl Default for GraphBinding___bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of GraphBinding_"][::std::mem::size_of::<GraphBinding_>() - 32usize];
    ["Alignment of GraphBinding_"][::std::mem::align_of::<GraphBinding_>() - 8usize];
    ["Offset of field: GraphBinding_::kind"][::std::mem::offset_of!(GraphBinding_, kind) - 0usize];
    ["Offset of field: GraphBinding_::u"][::std::mem::offset_of!(GraphBinding_, u) - 8usize];
};
impl Default for GraphBinding_ {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
unsafe extern "C" {
    pub fn make_GBind(p0: UVar, p1: Graph, p2: Graph) -> GraphBinding;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Vertex_ {
    pub kind: Vertex___bindgen_ty_1,
    pub u: Vertex___bindgen_ty_2,
}
pub const Vertex__is_VName: Vertex___bindgen_ty_1 = 0;
pub type Vertex___bindgen_ty_1 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub union Vertex___bindgen_ty_2 {
    pub vName_: Vertex___bindgen_ty_2__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Vertex___bindgen_ty_2__bindgen_ty_1 {
    pub name_: Name,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Vertex___bindgen_ty_2__bindgen_ty_1"]
        [::std::mem::size_of::<Vertex___bindgen_ty_2__bindgen_ty_1>() - 8usize];
    ["Alignment of Vertex___bindgen_ty_2__bindgen_ty_1"]
        [::std::mem::align_of::<Vertex___bindgen_ty_2__bindgen_ty_1>() - 8usize];
    ["Offset of field: Vertex___bindgen_ty_2__bindgen_ty_1::name_"]
        [::std::mem::offset_of!(Vertex___bindgen_ty_2__bindgen_ty_1, name_) - 0usize];
};
impl Default for Vertex___bindgen_ty_2__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Vertex___bindgen_ty_2"][::std::mem::size_of::<Vertex___bindgen_ty_2>() - 8usize];
    ["Alignment of Vertex___bindgen_ty_2"]
        [::std::mem::align_of::<Vertex___bindgen_ty_2>() - 8usize];
    ["Offset of field: Vertex___bindgen_ty_2::vName_"]
        [::std::mem::offset_of!(Vertex___bindgen_ty_2, vName_) - 0usize];
};
impl Default for Vertex___bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Vertex_"][::std::mem::size_of::<Vertex_>() - 16usize];
    ["Alignment of Vertex_"][::std::mem::align_of::<Vertex_>() - 8usize];
    ["Offset of field: Vertex_::kind"][::std::mem::offset_of!(Vertex_, kind) - 0usize];
    ["Offset of field: Vertex_::u"][::std::mem::offset_of!(Vertex_, u) - 8usize];
};
impl Default for Vertex_ {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
unsafe extern "C" {
    pub fn make_VName(p0: Name) -> Vertex;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Name_ {
    pub kind: Name___bindgen_ty_1,
    pub u: Name___bindgen_ty_2,
}
pub const Name__is_NameWildcard: Name___bindgen_ty_1 = 0;
pub const Name__is_NameVVar: Name___bindgen_ty_1 = 1;
pub const Name__is_NameGVar: Name___bindgen_ty_1 = 2;
pub const Name__is_NameQuoteGraph: Name___bindgen_ty_1 = 3;
pub const Name__is_NameQuoteVertex: Name___bindgen_ty_1 = 4;
pub type Name___bindgen_ty_1 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub union Name___bindgen_ty_2 {
    pub nameVVar_: Name___bindgen_ty_2__bindgen_ty_1,
    pub nameGVar_: Name___bindgen_ty_2__bindgen_ty_2,
    pub nameQuoteGraph_: Name___bindgen_ty_2__bindgen_ty_3,
    pub nameQuoteVertex_: Name___bindgen_ty_2__bindgen_ty_4,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Name___bindgen_ty_2__bindgen_ty_1 {
    pub lvar_: LVar,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Name___bindgen_ty_2__bindgen_ty_1"]
        [::std::mem::size_of::<Name___bindgen_ty_2__bindgen_ty_1>() - 8usize];
    ["Alignment of Name___bindgen_ty_2__bindgen_ty_1"]
        [::std::mem::align_of::<Name___bindgen_ty_2__bindgen_ty_1>() - 8usize];
    ["Offset of field: Name___bindgen_ty_2__bindgen_ty_1::lvar_"]
        [::std::mem::offset_of!(Name___bindgen_ty_2__bindgen_ty_1, lvar_) - 0usize];
};
impl Default for Name___bindgen_ty_2__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Name___bindgen_ty_2__bindgen_ty_2 {
    pub uvar_: UVar,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Name___bindgen_ty_2__bindgen_ty_2"]
        [::std::mem::size_of::<Name___bindgen_ty_2__bindgen_ty_2>() - 8usize];
    ["Alignment of Name___bindgen_ty_2__bindgen_ty_2"]
        [::std::mem::align_of::<Name___bindgen_ty_2__bindgen_ty_2>() - 8usize];
    ["Offset of field: Name___bindgen_ty_2__bindgen_ty_2::uvar_"]
        [::std::mem::offset_of!(Name___bindgen_ty_2__bindgen_ty_2, uvar_) - 0usize];
};
impl Default for Name___bindgen_ty_2__bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Name___bindgen_ty_2__bindgen_ty_3 {
    pub graph_: Graph,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Name___bindgen_ty_2__bindgen_ty_3"]
        [::std::mem::size_of::<Name___bindgen_ty_2__bindgen_ty_3>() - 8usize];
    ["Alignment of Name___bindgen_ty_2__bindgen_ty_3"]
        [::std::mem::align_of::<Name___bindgen_ty_2__bindgen_ty_3>() - 8usize];
    ["Offset of field: Name___bindgen_ty_2__bindgen_ty_3::graph_"]
        [::std::mem::offset_of!(Name___bindgen_ty_2__bindgen_ty_3, graph_) - 0usize];
};
impl Default for Name___bindgen_ty_2__bindgen_ty_3 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Name___bindgen_ty_2__bindgen_ty_4 {
    pub vertex_: Vertex,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Name___bindgen_ty_2__bindgen_ty_4"]
        [::std::mem::size_of::<Name___bindgen_ty_2__bindgen_ty_4>() - 8usize];
    ["Alignment of Name___bindgen_ty_2__bindgen_ty_4"]
        [::std::mem::align_of::<Name___bindgen_ty_2__bindgen_ty_4>() - 8usize];
    ["Offset of field: Name___bindgen_ty_2__bindgen_ty_4::vertex_"]
        [::std::mem::offset_of!(Name___bindgen_ty_2__bindgen_ty_4, vertex_) - 0usize];
};
impl Default for Name___bindgen_ty_2__bindgen_ty_4 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Name___bindgen_ty_2"][::std::mem::size_of::<Name___bindgen_ty_2>() - 8usize];
    ["Alignment of Name___bindgen_ty_2"][::std::mem::align_of::<Name___bindgen_ty_2>() - 8usize];
    ["Offset of field: Name___bindgen_ty_2::nameVVar_"]
        [::std::mem::offset_of!(Name___bindgen_ty_2, nameVVar_) - 0usize];
    ["Offset of field: Name___bindgen_ty_2::nameGVar_"]
        [::std::mem::offset_of!(Name___bindgen_ty_2, nameGVar_) - 0usize];
    ["Offset of field: Name___bindgen_ty_2::nameQuoteGraph_"]
        [::std::mem::offset_of!(Name___bindgen_ty_2, nameQuoteGraph_) - 0usize];
    ["Offset of field: Name___bindgen_ty_2::nameQuoteVertex_"]
        [::std::mem::offset_of!(Name___bindgen_ty_2, nameQuoteVertex_) - 0usize];
};
impl Default for Name___bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Name_"][::std::mem::size_of::<Name_>() - 16usize];
    ["Alignment of Name_"][::std::mem::align_of::<Name_>() - 8usize];
    ["Offset of field: Name_::kind"][::std::mem::offset_of!(Name_, kind) - 0usize];
    ["Offset of field: Name_::u"][::std::mem::offset_of!(Name_, u) - 8usize];
};
impl Default for Name_ {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
unsafe extern "C" {
    pub fn make_NameWildcard() -> Name;
}
unsafe extern "C" {
    pub fn make_NameVVar(p0: LVar) -> Name;
}
unsafe extern "C" {
    pub fn make_NameGVar(p0: UVar) -> Name;
}
unsafe extern "C" {
    pub fn make_NameQuoteGraph(p0: Graph) -> Name;
}
unsafe extern "C" {
    pub fn make_NameQuoteVertex(p0: Vertex) -> Name;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ListName_ {
    pub name_: Name,
    pub listname_: ListName,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ListName_"][::std::mem::size_of::<ListName_>() - 16usize];
    ["Alignment of ListName_"][::std::mem::align_of::<ListName_>() - 8usize];
    ["Offset of field: ListName_::name_"][::std::mem::offset_of!(ListName_, name_) - 0usize];
    ["Offset of field: ListName_::listname_"]
        [::std::mem::offset_of!(ListName_, listname_) - 8usize];
};
impl Default for ListName_ {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
unsafe extern "C" {
    pub fn make_ListName(p1: Name, p2: ListName) -> ListName;
}
unsafe extern "C" {
    #[doc = "   Cloning"]
    pub fn clone_Graph(p: Graph) -> Graph;
}
unsafe extern "C" {
    pub fn clone_Binding(p: Binding) -> Binding;
}
unsafe extern "C" {
    pub fn clone_GraphBinding(p: GraphBinding) -> GraphBinding;
}
unsafe extern "C" {
    pub fn clone_Vertex(p: Vertex) -> Vertex;
}
unsafe extern "C" {
    pub fn clone_Name(p: Name) -> Name;
}
unsafe extern "C" {
    pub fn clone_ListName(p: ListName) -> ListName;
}
unsafe extern "C" {
    #[doc = "   Recursive Destructors"]
    pub fn free_Graph(p: Graph);
}
unsafe extern "C" {
    pub fn free_Binding(p: Binding);
}
unsafe extern "C" {
    pub fn free_GraphBinding(p: GraphBinding);
}
unsafe extern "C" {
    pub fn free_Vertex(p: Vertex);
}
unsafe extern "C" {
    pub fn free_Name(p: Name);
}
unsafe extern "C" {
    pub fn free_ListName(p: ListName);
}
unsafe extern "C" {
    pub fn visitGraph(p: Graph);
}
unsafe extern "C" {
    pub fn visitBinding(p: Binding);
}
unsafe extern "C" {
    pub fn visitGraphBinding(p: GraphBinding);
}
unsafe extern "C" {
    pub fn visitVertex(p: Vertex);
}
unsafe extern "C" {
    pub fn visitName(p: Name);
}
unsafe extern "C" {
    pub fn visitListName(p: ListName);
}
unsafe extern "C" {
    pub fn visitUVar(p: UVar);
}
unsafe extern "C" {
    pub fn visitLVar(p: LVar);
}
unsafe extern "C" {
    pub fn visitIdent(i: Ident);
}
unsafe extern "C" {
    pub fn visitInteger(i: Integer);
}
unsafe extern "C" {
    pub fn visitDouble(d: Double);
}
unsafe extern "C" {
    pub fn visitChar(c: Char);
}
unsafe extern "C" {
    pub fn visitString(s: String);
}
pub type va_list = __builtin_va_list;
pub type __gnuc_va_list = __builtin_va_list;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __fsid_t"][::std::mem::size_of::<__fsid_t>() - 8usize];
    ["Alignment of __fsid_t"][::std::mem::align_of::<__fsid_t>() - 4usize];
    ["Offset of field: __fsid_t::__val"][::std::mem::offset_of!(__fsid_t, __val) - 0usize];
};
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __suseconds64_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __mbstate_t {
    pub __count: ::std::os::raw::c_int,
    pub __value: __mbstate_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __mbstate_t__bindgen_ty_1 {
    pub __wch: ::std::os::raw::c_uint,
    pub __wchb: [::std::os::raw::c_char; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __mbstate_t__bindgen_ty_1"]
        [::std::mem::size_of::<__mbstate_t__bindgen_ty_1>() - 4usize];
    ["Alignment of __mbstate_t__bindgen_ty_1"]
        [::std::mem::align_of::<__mbstate_t__bindgen_ty_1>() - 4usize];
    ["Offset of field: __mbstate_t__bindgen_ty_1::__wch"]
        [::std::mem::offset_of!(__mbstate_t__bindgen_ty_1, __wch) - 0usize];
    ["Offset of field: __mbstate_t__bindgen_ty_1::__wchb"]
        [::std::mem::offset_of!(__mbstate_t__bindgen_ty_1, __wchb) - 0usize];
};
impl Default for __mbstate_t__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __mbstate_t"][::std::mem::size_of::<__mbstate_t>() - 8usize];
    ["Alignment of __mbstate_t"][::std::mem::align_of::<__mbstate_t>() - 4usize];
    ["Offset of field: __mbstate_t::__count"]
        [::std::mem::offset_of!(__mbstate_t, __count) - 0usize];
    ["Offset of field: __mbstate_t::__value"]
        [::std::mem::offset_of!(__mbstate_t, __value) - 4usize];
};
impl Default for __mbstate_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos_t {
    pub __pos: __off_t,
    pub __state: __mbstate_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _G_fpos_t"][::std::mem::size_of::<_G_fpos_t>() - 16usize];
    ["Alignment of _G_fpos_t"][::std::mem::align_of::<_G_fpos_t>() - 8usize];
    ["Offset of field: _G_fpos_t::__pos"][::std::mem::offset_of!(_G_fpos_t, __pos) - 0usize];
    ["Offset of field: _G_fpos_t::__state"][::std::mem::offset_of!(_G_fpos_t, __state) - 8usize];
};
impl Default for _G_fpos_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type __fpos_t = _G_fpos_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos64_t {
    pub __pos: __off64_t,
    pub __state: __mbstate_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _G_fpos64_t"][::std::mem::size_of::<_G_fpos64_t>() - 16usize];
    ["Alignment of _G_fpos64_t"][::std::mem::align_of::<_G_fpos64_t>() - 8usize];
    ["Offset of field: _G_fpos64_t::__pos"][::std::mem::offset_of!(_G_fpos64_t, __pos) - 0usize];
    ["Offset of field: _G_fpos64_t::__state"]
        [::std::mem::offset_of!(_G_fpos64_t, __state) - 8usize];
};
impl Default for _G_fpos64_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type __fpos64_t = _G_fpos64_t;
pub type __FILE = _IO_FILE;
pub type FILE = _IO_FILE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_marker {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_codecvt {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_wide_data {
    _unused: [u8; 0],
}
pub type _IO_lock_t = ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_FILE {
    pub _flags: ::std::os::raw::c_int,
    pub _IO_read_ptr: *mut ::std::os::raw::c_char,
    pub _IO_read_end: *mut ::std::os::raw::c_char,
    pub _IO_read_base: *mut ::std::os::raw::c_char,
    pub _IO_write_base: *mut ::std::os::raw::c_char,
    pub _IO_write_ptr: *mut ::std::os::raw::c_char,
    pub _IO_write_end: *mut ::std::os::raw::c_char,
    pub _IO_buf_base: *mut ::std::os::raw::c_char,
    pub _IO_buf_end: *mut ::std::os::raw::c_char,
    pub _IO_save_base: *mut ::std::os::raw::c_char,
    pub _IO_backup_base: *mut ::std::os::raw::c_char,
    pub _IO_save_end: *mut ::std::os::raw::c_char,
    pub _markers: *mut _IO_marker,
    pub _chain: *mut _IO_FILE,
    pub _fileno: ::std::os::raw::c_int,
    pub _flags2: ::std::os::raw::c_int,
    pub _old_offset: __off_t,
    pub _cur_column: ::std::os::raw::c_ushort,
    pub _vtable_offset: ::std::os::raw::c_schar,
    pub _shortbuf: [::std::os::raw::c_char; 1usize],
    pub _lock: *mut _IO_lock_t,
    pub _offset: __off64_t,
    pub _codecvt: *mut _IO_codecvt,
    pub _wide_data: *mut _IO_wide_data,
    pub _freeres_list: *mut _IO_FILE,
    pub _freeres_buf: *mut ::std::os::raw::c_void,
    pub __pad5: usize,
    pub _mode: ::std::os::raw::c_int,
    pub _unused2: [::std::os::raw::c_char; 20usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _IO_FILE"][::std::mem::size_of::<_IO_FILE>() - 216usize];
    ["Alignment of _IO_FILE"][::std::mem::align_of::<_IO_FILE>() - 8usize];
    ["Offset of field: _IO_FILE::_flags"][::std::mem::offset_of!(_IO_FILE, _flags) - 0usize];
    ["Offset of field: _IO_FILE::_IO_read_ptr"]
        [::std::mem::offset_of!(_IO_FILE, _IO_read_ptr) - 8usize];
    ["Offset of field: _IO_FILE::_IO_read_end"]
        [::std::mem::offset_of!(_IO_FILE, _IO_read_end) - 16usize];
    ["Offset of field: _IO_FILE::_IO_read_base"]
        [::std::mem::offset_of!(_IO_FILE, _IO_read_base) - 24usize];
    ["Offset of field: _IO_FILE::_IO_write_base"]
        [::std::mem::offset_of!(_IO_FILE, _IO_write_base) - 32usize];
    ["Offset of field: _IO_FILE::_IO_write_ptr"]
        [::std::mem::offset_of!(_IO_FILE, _IO_write_ptr) - 40usize];
    ["Offset of field: _IO_FILE::_IO_write_end"]
        [::std::mem::offset_of!(_IO_FILE, _IO_write_end) - 48usize];
    ["Offset of field: _IO_FILE::_IO_buf_base"]
        [::std::mem::offset_of!(_IO_FILE, _IO_buf_base) - 56usize];
    ["Offset of field: _IO_FILE::_IO_buf_end"]
        [::std::mem::offset_of!(_IO_FILE, _IO_buf_end) - 64usize];
    ["Offset of field: _IO_FILE::_IO_save_base"]
        [::std::mem::offset_of!(_IO_FILE, _IO_save_base) - 72usize];
    ["Offset of field: _IO_FILE::_IO_backup_base"]
        [::std::mem::offset_of!(_IO_FILE, _IO_backup_base) - 80usize];
    ["Offset of field: _IO_FILE::_IO_save_end"]
        [::std::mem::offset_of!(_IO_FILE, _IO_save_end) - 88usize];
    ["Offset of field: _IO_FILE::_markers"][::std::mem::offset_of!(_IO_FILE, _markers) - 96usize];
    ["Offset of field: _IO_FILE::_chain"][::std::mem::offset_of!(_IO_FILE, _chain) - 104usize];
    ["Offset of field: _IO_FILE::_fileno"][::std::mem::offset_of!(_IO_FILE, _fileno) - 112usize];
    ["Offset of field: _IO_FILE::_flags2"][::std::mem::offset_of!(_IO_FILE, _flags2) - 116usize];
    ["Offset of field: _IO_FILE::_old_offset"]
        [::std::mem::offset_of!(_IO_FILE, _old_offset) - 120usize];
    ["Offset of field: _IO_FILE::_cur_column"]
        [::std::mem::offset_of!(_IO_FILE, _cur_column) - 128usize];
    ["Offset of field: _IO_FILE::_vtable_offset"]
        [::std::mem::offset_of!(_IO_FILE, _vtable_offset) - 130usize];
    ["Offset of field: _IO_FILE::_shortbuf"]
        [::std::mem::offset_of!(_IO_FILE, _shortbuf) - 131usize];
    ["Offset of field: _IO_FILE::_lock"][::std::mem::offset_of!(_IO_FILE, _lock) - 136usize];
    ["Offset of field: _IO_FILE::_offset"][::std::mem::offset_of!(_IO_FILE, _offset) - 144usize];
    ["Offset of field: _IO_FILE::_codecvt"][::std::mem::offset_of!(_IO_FILE, _codecvt) - 152usize];
    ["Offset of field: _IO_FILE::_wide_data"]
        [::std::mem::offset_of!(_IO_FILE, _wide_data) - 160usize];
    ["Offset of field: _IO_FILE::_freeres_list"]
        [::std::mem::offset_of!(_IO_FILE, _freeres_list) - 168usize];
    ["Offset of field: _IO_FILE::_freeres_buf"]
        [::std::mem::offset_of!(_IO_FILE, _freeres_buf) - 176usize];
    ["Offset of field: _IO_FILE::__pad5"][::std::mem::offset_of!(_IO_FILE, __pad5) - 184usize];
    ["Offset of field: _IO_FILE::_mode"][::std::mem::offset_of!(_IO_FILE, _mode) - 192usize];
    ["Offset of field: _IO_FILE::_unused2"][::std::mem::offset_of!(_IO_FILE, _unused2) - 196usize];
};
impl Default for _IO_FILE {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type off_t = __off_t;
pub type fpos_t = __fpos_t;
unsafe extern "C" {
    pub static mut stdin: *mut FILE;
}
unsafe extern "C" {
    pub static mut stdout: *mut FILE;
}
unsafe extern "C" {
    pub static mut stderr: *mut FILE;
}
unsafe extern "C" {
    pub fn remove(__filename: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn rename(
        __old: *const ::std::os::raw::c_char,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn renameat(
        __oldfd: ::std::os::raw::c_int,
        __old: *const ::std::os::raw::c_char,
        __newfd: ::std::os::raw::c_int,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn tmpfile() -> *mut FILE;
}
unsafe extern "C" {
    pub fn tmpnam(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn fflush(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fopen(
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
unsafe extern "C" {
    pub fn freopen(
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
        __stream: *mut FILE,
    ) -> *mut FILE;
}
unsafe extern "C" {
    pub fn fdopen(__fd: ::std::os::raw::c_int, __modes: *const ::std::os::raw::c_char)
    -> *mut FILE;
}
unsafe extern "C" {
    pub fn fmemopen(
        __s: *mut ::std::os::raw::c_void,
        __len: usize,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
unsafe extern "C" {
    pub fn open_memstream(
        __bufloc: *mut *mut ::std::os::raw::c_char,
        __sizeloc: *mut usize,
    ) -> *mut FILE;
}
unsafe extern "C" {
    pub fn setbuf(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char);
}
unsafe extern "C" {
    pub fn setvbuf(
        __stream: *mut FILE,
        __buf: *mut ::std::os::raw::c_char,
        __modes: ::std::os::raw::c_int,
        __n: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fprintf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn printf(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sprintf(
        __s: *mut ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn vfprintf(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn vprintf(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn vsprintf(
        __s: *mut ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn snprintf(
        __s: *mut ::std::os::raw::c_char,
        __maxlen: ::std::os::raw::c_ulong,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn vsnprintf(
        __s: *mut ::std::os::raw::c_char,
        __maxlen: ::std::os::raw::c_ulong,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn vdprintf(
        __fd: ::std::os::raw::c_int,
        __fmt: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dprintf(
        __fd: ::std::os::raw::c_int,
        __fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fscanf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn scanf(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sscanf(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
pub type _Float32 = f32;
pub type _Float64 = f64;
pub type _Float32x = f64;
pub type _Float64x = u128;
unsafe extern "C" {
    #[link_name = "\u{1}__isoc99_fscanf"]
    pub fn fscanf1(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[link_name = "\u{1}__isoc99_scanf"]
    pub fn scanf1(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[link_name = "\u{1}__isoc99_sscanf"]
    pub fn sscanf1(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn vfscanf(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn vscanf(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn vsscanf(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[link_name = "\u{1}__isoc99_vfscanf"]
    pub fn vfscanf1(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[link_name = "\u{1}__isoc99_vscanf"]
    pub fn vscanf1(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[link_name = "\u{1}__isoc99_vsscanf"]
    pub fn vsscanf1(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fgetc(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getc(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getchar() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getchar_unlocked() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fputc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn putc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn putchar(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn putc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn putchar_unlocked(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fgets(
        __s: *mut ::std::os::raw::c_char,
        __n: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn __getdelim(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut usize,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
unsafe extern "C" {
    pub fn getdelim(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut usize,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
unsafe extern "C" {
    pub fn getline(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut usize,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
unsafe extern "C" {
    pub fn fputs(__s: *const ::std::os::raw::c_char, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn puts(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ungetc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fread(
        __ptr: *mut ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
        __n: ::std::os::raw::c_ulong,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    pub fn fwrite(
        __ptr: *const ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
        __n: ::std::os::raw::c_ulong,
        __s: *mut FILE,
    ) -> ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    pub fn fseek(
        __stream: *mut FILE,
        __off: ::std::os::raw::c_long,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ftell(__stream: *mut FILE) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn rewind(__stream: *mut FILE);
}
unsafe extern "C" {
    pub fn fseeko(
        __stream: *mut FILE,
        __off: __off_t,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ftello(__stream: *mut FILE) -> __off_t;
}
unsafe extern "C" {
    pub fn fgetpos(__stream: *mut FILE, __pos: *mut fpos_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fsetpos(__stream: *mut FILE, __pos: *const fpos_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn clearerr(__stream: *mut FILE);
}
unsafe extern "C" {
    pub fn feof(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ferror(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn perror(__s: *const ::std::os::raw::c_char);
}
unsafe extern "C" {
    pub fn fileno(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn popen(
        __command: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
unsafe extern "C" {
    pub fn ctermid(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn flockfile(__stream: *mut FILE);
}
unsafe extern "C" {
    pub fn ftrylockfile(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn funlockfile(__stream: *mut FILE);
}
unsafe extern "C" {
    pub fn __uflow(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __overflow(arg1: *mut FILE, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pGraph(inp: *mut FILE) -> Graph;
}
unsafe extern "C" {
    pub fn psGraph(str_: *const ::std::os::raw::c_char) -> Graph;
}
unsafe extern "C" {
    pub fn pGraph1(inp: *mut FILE) -> Graph;
}
unsafe extern "C" {
    pub fn psGraph1(str_: *const ::std::os::raw::c_char) -> Graph;
}
unsafe extern "C" {
    pub fn pGraph2(inp: *mut FILE) -> Graph;
}
unsafe extern "C" {
    pub fn psGraph2(str_: *const ::std::os::raw::c_char) -> Graph;
}
unsafe extern "C" {
    pub fn pGraph3(inp: *mut FILE) -> Graph;
}
unsafe extern "C" {
    pub fn psGraph3(str_: *const ::std::os::raw::c_char) -> Graph;
}
unsafe extern "C" {
    pub fn pBinding(inp: *mut FILE) -> Binding;
}
unsafe extern "C" {
    pub fn psBinding(str_: *const ::std::os::raw::c_char) -> Binding;
}
unsafe extern "C" {
    pub fn pGraphBinding(inp: *mut FILE) -> GraphBinding;
}
unsafe extern "C" {
    pub fn psGraphBinding(str_: *const ::std::os::raw::c_char) -> GraphBinding;
}
unsafe extern "C" {
    pub fn pVertex(inp: *mut FILE) -> Vertex;
}
unsafe extern "C" {
    pub fn psVertex(str_: *const ::std::os::raw::c_char) -> Vertex;
}
unsafe extern "C" {
    pub fn pName(inp: *mut FILE) -> Name;
}
unsafe extern "C" {
    pub fn psName(str_: *const ::std::os::raw::c_char) -> Name;
}
unsafe extern "C" {
    pub fn pListName(inp: *mut FILE) -> ListName;
}
unsafe extern "C" {
    pub fn psListName(str_: *const ::std::os::raw::c_char) -> ListName;
}
unsafe extern "C" {
    pub fn renderCC(c: Char);
}
unsafe extern "C" {
    pub fn renderCS(s: String);
}
unsafe extern "C" {
    pub fn indent();
}
unsafe extern "C" {
    pub fn backup();
}
unsafe extern "C" {
    pub fn onEmptyLine();
}
unsafe extern "C" {
    pub fn removeTrailingSpaces();
}
unsafe extern "C" {
    pub fn removeTrailingWhitespace();
}
unsafe extern "C" {
    pub fn printGraph(p: Graph) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn printBinding(p: Binding) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn printGraphBinding(p: GraphBinding) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn printVertex(p: Vertex) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn printName(p: Name) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn printListName(p: ListName) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn ppGraph(p: Graph, i: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn ppBinding(p: Binding, i: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn ppGraphBinding(p: GraphBinding, i: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn ppVertex(p: Vertex, i: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn ppName(p: Name, i: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn ppListName(p: ListName, i: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn showGraph(p: Graph) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn showBinding(p: Binding) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn showGraphBinding(p: GraphBinding) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn showVertex(p: Vertex) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn showName(p: Name) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn showListName(p: ListName) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn shGraph(p: Graph);
}
unsafe extern "C" {
    pub fn shBinding(p: Binding);
}
unsafe extern "C" {
    pub fn shGraphBinding(p: GraphBinding);
}
unsafe extern "C" {
    pub fn shVertex(p: Vertex);
}
unsafe extern "C" {
    pub fn shName(p: Name);
}
unsafe extern "C" {
    pub fn shListName(p: ListName);
}
unsafe extern "C" {
    pub fn ppUVar(s: String, i: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn ppLVar(s: String, i: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn shUVar(s: String);
}
unsafe extern "C" {
    pub fn shLVar(s: String);
}
unsafe extern "C" {
    pub fn ppInteger(n: Integer, i: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn ppDouble(d: Double, i: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn ppChar(c: Char, i: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn ppString(s: String, i: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn ppIdent(s: String, i: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn shInteger(n: Integer);
}
unsafe extern "C" {
    pub fn shDouble(d: Double);
}
unsafe extern "C" {
    pub fn shChar(c: Char);
}
unsafe extern "C" {
    pub fn shString(s: String);
}
unsafe extern "C" {
    pub fn shIdent(s: String);
}
unsafe extern "C" {
    pub fn bufEscapeS(s: *const ::std::os::raw::c_char);
}
unsafe extern "C" {
    pub fn bufEscapeC(c: ::std::os::raw::c_char);
}
unsafe extern "C" {
    pub fn bufAppendS(s: *const ::std::os::raw::c_char);
}
unsafe extern "C" {
    pub fn bufAppendC(c: ::std::os::raw::c_char);
}
unsafe extern "C" {
    pub fn bufReset();
}
unsafe extern "C" {
    pub fn resizeBuffer();
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __locale_data {
    pub _address: u8,
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __va_list_tag"][::std::mem::size_of::<__va_list_tag>() - 24usize];
    ["Alignment of __va_list_tag"][::std::mem::align_of::<__va_list_tag>() - 8usize];
    ["Offset of field: __va_list_tag::gp_offset"]
        [::std::mem::offset_of!(__va_list_tag, gp_offset) - 0usize];
    ["Offset of field: __va_list_tag::fp_offset"]
        [::std::mem::offset_of!(__va_list_tag, fp_offset) - 4usize];
    ["Offset of field: __va_list_tag::overflow_arg_area"]
        [::std::mem::offset_of!(__va_list_tag, overflow_arg_area) - 8usize];
    ["Offset of field: __va_list_tag::reg_save_area"]
        [::std::mem::offset_of!(__va_list_tag, reg_save_area) - 16usize];
};
impl Default for __va_list_tag {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
