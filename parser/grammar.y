/* -*- c -*- File generated by the BNF Converter (bnfc 2.9.6). */

/* Parser definition to be used with Bison. */

/* Generate header file for lexer. */
%defines "Bison.h"

/* Reentrant parser */
%pure_parser
  /* From Bison 2.3b (2008): %define api.pure full */
%lex-param   { yyscan_t scanner }
%parse-param { yyscan_t scanner }

/* Turn on line/column tracking in the grammar_lloc structure: */
%locations

/* Argument to the parser to be filled with the parsed tree. */
%parse-param { YYSTYPE *result }

%{
/* Begin C preamble code */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "Absyn.h"

#define YYMAXDEPTH 10000000

/* The type yyscan_t is defined by flex, but we need it in the parser already. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

typedef struct yy_buffer_state *YY_BUFFER_STATE;
extern YY_BUFFER_STATE grammar__scan_string(const char *str, yyscan_t scanner);
extern void grammar__delete_buffer(YY_BUFFER_STATE buf, yyscan_t scanner);

extern void grammar_lex_destroy(yyscan_t scanner);
extern char* grammar_get_text(yyscan_t scanner);

extern yyscan_t grammar__initialize_lexer(FILE * inp);

/* List reversal functions. */
ListName reverseListName(ListName l)
{
  ListName prev = 0;
  ListName tmp = 0;
  while (l)
  {
    tmp = l->listname_;
    l->listname_ = prev;
    prev = l;
    l = tmp;
  }
  return prev;
}

/* End C preamble code */
%}

%union
{
  int    _int;
  char   _char;
  double _double;
  char*  _string;
  Graph graph_;
  Binding binding_;
  GraphBinding graphbinding_;
  AttrVal attrval_;
  AttrName attrname_;
  Attr attr_;
  ListAttr listattr_;
  Vertex vertex_;
  Name name_;
  ListName listname_;
}

%{
void yyerror(YYLTYPE *loc, yyscan_t scanner, YYSTYPE *result, const char *msg)
{
  fprintf(stderr, "error: %d,%d: %s at %s\n",
    loc->first_line, loc->first_column, msg, grammar_get_text(scanner));
}

int yyparse(yyscan_t scanner, YYSTYPE *result);

extern int yylex(YYSTYPE *lvalp, YYLTYPE *llocp, yyscan_t scanner);
%}

%token          _ERROR_
%token          _SYMB_11     /* \" */
%token          _LPAREN      /* ( */
%token          _RPAREN      /* ) */
%token          _STAR        /* * */
%token          _COMMA       /* , */
%token          _SYMB_2      /* 0 */
%token          _LT          /* < */
%token          _EQ          /* = */
%token          _GT          /* > */
%token          _AT          /* @ */
%token          _LBRACK      /* [ */
%token          _RBRACK      /* ] */
%token          _UNDERSCORE  /* _ */
%token          _KW_in       /* in */
%token          _KW_let      /* let */
%token          _LBRACE      /* { */
%token          _BAR         /* | */
%token          _RBRACE      /* } */
%token<_string> T_LVar       /* LVar */
%token<_string> T_UVar       /* UVar */

%type <graph_> Graph
%type <graph_> Graph1
%type <graph_> Graph2
%type <graph_> Graph3
%type <binding_> Binding
%type <graphbinding_> GraphBinding
%type <attrval_> AttrVal
%type <attrname_> AttrName
%type <attr_> Attr
%type <listattr_> ListAttr
%type <vertex_> Vertex
%type <name_> Name
%type <listname_> ListName

%start Graph

%%

Graph : Graph1 { $$ = $1; result->graph_ = $$; }
  | Graph _STAR Graph1 { $$ = make_GTensor($1, $3); result->graph_ = $$; }
;
Graph1 : Graph2 { $$ = $1; result->graph_ = $$; }
  | Binding { $$ = make_GNominate($1); result->graph_ = $$; }
  | _LPAREN Binding _COMMA Binding _RPAREN { $$ = make_GEdgeAnon($2, $4); result->graph_ = $$; }
  | Name _LPAREN Binding _COMMA Binding _RPAREN { $$ = make_GEdgeNamed($1, $3, $5); result->graph_ = $$; }
  | _LBRACK _EQ Graph Graph _RBRACK { $$ = make_GRuleAnon($3, $4); result->graph_ = $$; }
  | Name _LBRACK _EQ Graph Graph _RBRACK { $$ = make_GRuleNamed($1, $4, $5); result->graph_ = $$; }
  | GraphBinding { $$ = make_GSubgraph($1); result->graph_ = $$; }
;
Graph2 : Graph3 { $$ = $1; result->graph_ = $$; }
  | Vertex _BAR Graph1 { $$ = make_GVertex($1, $3); result->graph_ = $$; }
  | T_LVar _BAR Graph1 { $$ = make_GVar($1, $3); result->graph_ = $$; }
;
Graph3 : _LBRACE Graph _RBRACE { $$ = $2; result->graph_ = $$; }
  | _SYMB_2 { $$ = make_GNil(); result->graph_ = $$; }
;
Binding : _KW_let T_LVar _EQ Vertex _KW_in Graph2 { $$ = make_VBind($2, $4, $6); result->binding_ = $$; }
;
GraphBinding : _KW_let T_UVar _EQ Graph _KW_in Graph2 { $$ = make_GBind($2, $4, $6); result->graphbinding_ = $$; }
;
AttrVal : _SYMB_11 T_LVar _SYMB_11 { $$ = make_AttributeValue($2); result->attrval_ = $$; }
;
AttrName : T_LVar { $$ = make_AttributeName($1); result->attrname_ = $$; }
;
Attr : AttrName _EQ AttrVal { $$ = make_AttributePair($1, $3); result->attr_ = $$; }
;
ListAttr : /* empty */ { $$ = make_EmptyAttrList(); result->listattr_ = $$; }
  | Attr ListAttr { $$ = make_AttrList($1, $2); result->listattr_ = $$; }
;
Vertex : _LT Name ListAttr _GT { $$ = make_VName($2, $3); result->vertex_ = $$; }
;
Name : _UNDERSCORE { $$ = make_NameWildcard(); result->name_ = $$; }
  | T_LVar { $$ = make_NameVVar($1); result->name_ = $$; }
  | T_UVar { $$ = make_NameGVar($1); result->name_ = $$; }
  | _AT Graph { $$ = make_NameQuoteGraph($2); result->name_ = $$; }
  | _AT Vertex { $$ = make_NameQuoteVertex($2); result->name_ = $$; }
;
ListName : /* empty */ { $$ = 0; result->listname_ = $$; }
  | Name { $$ = make_ListName($1, 0); result->listname_ = $$; }
  | Name _COMMA ListName { $$ = make_ListName($1, $3); result->listname_ = $$; }
;

%%


/* Entrypoint: parse Graph from file. */
Graph pGraph(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = grammar__initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  grammar_lex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.graph_;
  }
}

/* Entrypoint: parse Graph from string. */
Graph psGraph(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = grammar__initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = grammar__scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  grammar__delete_buffer(buf, scanner);
  grammar_lex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.graph_;
  }
}

/* Entrypoint: parse Graph from file. */
Graph pGraph1(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = grammar__initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  grammar_lex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.graph_;
  }
}

/* Entrypoint: parse Graph from string. */
Graph psGraph1(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = grammar__initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = grammar__scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  grammar__delete_buffer(buf, scanner);
  grammar_lex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.graph_;
  }
}

/* Entrypoint: parse Graph from file. */
Graph pGraph2(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = grammar__initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  grammar_lex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.graph_;
  }
}

/* Entrypoint: parse Graph from string. */
Graph psGraph2(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = grammar__initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = grammar__scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  grammar__delete_buffer(buf, scanner);
  grammar_lex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.graph_;
  }
}

/* Entrypoint: parse Graph from file. */
Graph pGraph3(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = grammar__initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  grammar_lex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.graph_;
  }
}

/* Entrypoint: parse Graph from string. */
Graph psGraph3(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = grammar__initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = grammar__scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  grammar__delete_buffer(buf, scanner);
  grammar_lex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.graph_;
  }
}

/* Entrypoint: parse Binding from file. */
Binding pBinding(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = grammar__initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  grammar_lex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.binding_;
  }
}

/* Entrypoint: parse Binding from string. */
Binding psBinding(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = grammar__initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = grammar__scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  grammar__delete_buffer(buf, scanner);
  grammar_lex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.binding_;
  }
}

/* Entrypoint: parse GraphBinding from file. */
GraphBinding pGraphBinding(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = grammar__initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  grammar_lex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.graphbinding_;
  }
}

/* Entrypoint: parse GraphBinding from string. */
GraphBinding psGraphBinding(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = grammar__initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = grammar__scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  grammar__delete_buffer(buf, scanner);
  grammar_lex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.graphbinding_;
  }
}

/* Entrypoint: parse AttrVal from file. */
AttrVal pAttrVal(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = grammar__initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  grammar_lex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.attrval_;
  }
}

/* Entrypoint: parse AttrVal from string. */
AttrVal psAttrVal(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = grammar__initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = grammar__scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  grammar__delete_buffer(buf, scanner);
  grammar_lex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.attrval_;
  }
}

/* Entrypoint: parse AttrName from file. */
AttrName pAttrName(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = grammar__initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  grammar_lex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.attrname_;
  }
}

/* Entrypoint: parse AttrName from string. */
AttrName psAttrName(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = grammar__initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = grammar__scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  grammar__delete_buffer(buf, scanner);
  grammar_lex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.attrname_;
  }
}

/* Entrypoint: parse Attr from file. */
Attr pAttr(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = grammar__initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  grammar_lex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.attr_;
  }
}

/* Entrypoint: parse Attr from string. */
Attr psAttr(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = grammar__initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = grammar__scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  grammar__delete_buffer(buf, scanner);
  grammar_lex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.attr_;
  }
}

/* Entrypoint: parse ListAttr from file. */
ListAttr pListAttr(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = grammar__initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  grammar_lex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.listattr_;
  }
}

/* Entrypoint: parse ListAttr from string. */
ListAttr psListAttr(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = grammar__initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = grammar__scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  grammar__delete_buffer(buf, scanner);
  grammar_lex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.listattr_;
  }
}

/* Entrypoint: parse Vertex from file. */
Vertex pVertex(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = grammar__initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  grammar_lex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.vertex_;
  }
}

/* Entrypoint: parse Vertex from string. */
Vertex psVertex(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = grammar__initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = grammar__scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  grammar__delete_buffer(buf, scanner);
  grammar_lex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.vertex_;
  }
}

/* Entrypoint: parse Name from file. */
Name pName(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = grammar__initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  grammar_lex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.name_;
  }
}

/* Entrypoint: parse Name from string. */
Name psName(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = grammar__initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = grammar__scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  grammar__delete_buffer(buf, scanner);
  grammar_lex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.name_;
  }
}

/* Entrypoint: parse ListName from file. */
ListName pListName(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = grammar__initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  grammar_lex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.listname_;
  }
}

/* Entrypoint: parse ListName from string. */
ListName psListName(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = grammar__initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = grammar__scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  grammar__delete_buffer(buf, scanner);
  grammar_lex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.listname_;
  }
}



