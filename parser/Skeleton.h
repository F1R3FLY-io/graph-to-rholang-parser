/* File generated by the BNF Converter (bnfc 2.9.6). */

#ifndef SKELETON_HEADER
#define SKELETON_HEADER
/* You might want to change the above name. */

#include "Absyn.h"

typedef void (*visitGTensor)(Graph p);
typedef void (*visitGNominate)(Graph p);
typedef void (*visitGEdgeAnon)(Graph p);
typedef void (*visitGEdgeNamed)(Graph p);
typedef void (*visitGRuleAnon)(Graph p);
typedef void (*visitGRuleNamed)(Graph p);
typedef void (*visitBindingCallback)(Binding p);
typedef void (*visitGraphBindingCallback)(GraphBinding p);
typedef void (*visitVertexCallback)(Vertex p);
typedef void (*visitNameCallback)(Name p);
typedef void (*visitUVarCallback)(UVar p);
typedef void (*visitLVarCallback)(LVar p);
typedef void (*visitIdentCallback)(Ident i);
typedef void (*visitIntegerCallback)(Integer i);
typedef void (*visitDoubleCallback)(Double d);
typedef void (*visitCharCallback)(Char c);
typedef void (*visitStringCallback)(String s);
typedef void (*visitGSubgraph)(Graph p);
typedef void (*visitGVertexCallback)(Graph p);
typedef void (*visitGVar)(Graph p);
typedef void (*visitGNilCallback)(Graph p);
typedef void (*visitVBindCallback)(Binding p);
typedef void (*visitGBindCallback)(GraphBinding p);
typedef void (*visitIsVNameCallback)(Vertex p);
typedef void (*visitNameWildcardCallback)(Name p);
typedef void (*visitNameVVarCallback)(Name p);
typedef void (*visitNameGVarCallback)(Name p);
typedef void (*visitIsNameQuoteGraph)(Name p);
typedef void (*visitIsNameQuoteVertex)(Name p);
typedef void (*visitListNameCallback)(ListName listname);


typedef struct {
  visitGTensor visitIsGTensorCallback;
  visitGNominate visitIsGNominate;
  visitGEdgeAnon visitIsGEdgeAnon;
  visitGEdgeNamed visitIsGEdgeNamed;
  visitGRuleAnon visitIsGRuleAnonCallback;
  visitGRuleNamed visitIsGRuleNamedCallback;
  visitBindingCallback visitBindingCallback;
  visitGraphBindingCallback visitGraphBindingCallback;
  visitVertexCallback visitVertexCallback;
  visitGVar visitIsGVarCallback;
  visitNameCallback visitNameCallback;
  visitGSubgraph visitIsGSubgraphCallback;
  visitUVarCallback visitUVar;
  visitLVarCallback visitLVar;
  visitIdentCallback visitIdent;
  visitIntegerCallback visitIntegerCallback;
  visitDoubleCallback visitDoubleCallback;
  visitCharCallback visitCharCallback;
  visitStringCallback visitStringCallback;
  visitGVertexCallback visitIsGVertexCallback;
  visitGNilCallback visitIsGNilCallback;
  visitVBindCallback visitIsVBindCallback;
  visitGBindCallback visitIsGBindCallback;
  visitIsVNameCallback visitIsVNameCallback;
  visitNameWildcardCallback visitNameWildcardCallback;
  visitNameVVarCallback visitNameVVarCallback;
  visitNameGVarCallback visitNameGVarCallback;
  visitIsNameQuoteGraph visitIsNameQuoteGraph;
  visitIsNameQuoteVertex visitIsNameQuoteVertex;
  visitListNameCallback visitListName;
}  Visitor;

void visitGraph(Graph p, Visitor *visitor);
void visitBinding(Binding p, Visitor *visitor);
void visitGraphBinding(GraphBinding p, Visitor *visitor);
void visitVertex(Vertex p, Visitor *visitor);
void visitName(Name p, Visitor *visitor);
void visitListName(ListName p, Visitor *visitor);
void visitUVar(UVar p,Visitor *visitor);
void visitLVar(LVar p, Visitor *visitor);
void visitIdent(Ident i, Visitor *visitor);
void visitInteger(Integer i, Visitor *visitor);
void visitDouble(Double d, Visitor *visitor);
void visitChar(Char c, Visitor *visitor);
void visitString(String s, Visitor *visitor);

#endif
